// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.0
// source: proto/proto-file.proto

package HandIn2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RollingDieServiceClient is the client API for RollingDieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RollingDieServiceClient interface {
	SetupAgreements(ctx context.Context, in *InitialAgreement, opts ...grpc.CallOption) (*Ack, error)
	SendCommitment(ctx context.Context, in *Commitment, opts ...grpc.CallOption) (*Ack, error)
	OpenCommitment(ctx context.Context, in *CommitmentOpener, opts ...grpc.CallOption) (*RealRoll, error)
}

type rollingDieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRollingDieServiceClient(cc grpc.ClientConnInterface) RollingDieServiceClient {
	return &rollingDieServiceClient{cc}
}

func (c *rollingDieServiceClient) SetupAgreements(ctx context.Context, in *InitialAgreement, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/proto.RollingDieService/SetupAgreements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rollingDieServiceClient) SendCommitment(ctx context.Context, in *Commitment, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/proto.RollingDieService/SendCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rollingDieServiceClient) OpenCommitment(ctx context.Context, in *CommitmentOpener, opts ...grpc.CallOption) (*RealRoll, error) {
	out := new(RealRoll)
	err := c.cc.Invoke(ctx, "/proto.RollingDieService/OpenCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RollingDieServiceServer is the server API for RollingDieService service.
// All implementations must embed UnimplementedRollingDieServiceServer
// for forward compatibility
type RollingDieServiceServer interface {
	SetupAgreements(context.Context, *InitialAgreement) (*Ack, error)
	SendCommitment(context.Context, *Commitment) (*Ack, error)
	OpenCommitment(context.Context, *CommitmentOpener) (*RealRoll, error)
	mustEmbedUnimplementedRollingDieServiceServer()
}

// UnimplementedRollingDieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRollingDieServiceServer struct {
}

func (UnimplementedRollingDieServiceServer) SetupAgreements(context.Context, *InitialAgreement) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupAgreements not implemented")
}
func (UnimplementedRollingDieServiceServer) SendCommitment(context.Context, *Commitment) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommitment not implemented")
}
func (UnimplementedRollingDieServiceServer) OpenCommitment(context.Context, *CommitmentOpener) (*RealRoll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenCommitment not implemented")
}
func (UnimplementedRollingDieServiceServer) mustEmbedUnimplementedRollingDieServiceServer() {}

// UnsafeRollingDieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RollingDieServiceServer will
// result in compilation errors.
type UnsafeRollingDieServiceServer interface {
	mustEmbedUnimplementedRollingDieServiceServer()
}

func RegisterRollingDieServiceServer(s grpc.ServiceRegistrar, srv RollingDieServiceServer) {
	s.RegisterService(&RollingDieService_ServiceDesc, srv)
}

func _RollingDieService_SetupAgreements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitialAgreement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollingDieServiceServer).SetupAgreements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RollingDieService/SetupAgreements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollingDieServiceServer).SetupAgreements(ctx, req.(*InitialAgreement))
	}
	return interceptor(ctx, in, info, handler)
}

func _RollingDieService_SendCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commitment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollingDieServiceServer).SendCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RollingDieService/SendCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollingDieServiceServer).SendCommitment(ctx, req.(*Commitment))
	}
	return interceptor(ctx, in, info, handler)
}

func _RollingDieService_OpenCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitmentOpener)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollingDieServiceServer).OpenCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RollingDieService/OpenCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollingDieServiceServer).OpenCommitment(ctx, req.(*CommitmentOpener))
	}
	return interceptor(ctx, in, info, handler)
}

// RollingDieService_ServiceDesc is the grpc.ServiceDesc for RollingDieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RollingDieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RollingDieService",
	HandlerType: (*RollingDieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupAgreements",
			Handler:    _RollingDieService_SetupAgreements_Handler,
		},
		{
			MethodName: "SendCommitment",
			Handler:    _RollingDieService_SendCommitment_Handler,
		},
		{
			MethodName: "OpenCommitment",
			Handler:    _RollingDieService_OpenCommitment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto-file.proto",
}
